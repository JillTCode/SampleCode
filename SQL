/*The purpose of this stored procedure is to find the order size distribution of the first root orders of all the customers that currently belong to the specific sales person.

  The challenge is an order number could be reused every 6 months, 
  there is no unique identifier for an order,
  and the order information in the database are at split orders level.

  The solution is to create an uniuqe key for an order by combining order number and order date, 
  and use recursive CTE to identify orders' parent/child relationship and combine split orders into presplit order. */


USE SampleCode;
DROP PROC IF EXISTS spFirstRootOrder;
GO

CREATE PROC spFirstRootOrder
  @SalesPerson AS VARCHAR(5)
AS

/*1. Find all orders of the customers that currently belong to a specific sales person.*/
SELECT * 
INTO #Temp1_OrdersOfSalesPerson
FROM [dbo].[Orders]
WHERE [CustomerID] IN 
  (SELECT [dbo].[AccountOwner].CustomerID 
   FROM [dbo].[AccountOwner]
   WHERE 
       [AccountOwnerEffectiveDate]=(SELECT MAX([AccountOwnerEffectiveDate]) FROM [dbo].[AccountOwner])
	 AND SalesPerson=@SalesPerson)


/*2. Create key for orders*/
SELECT *, 
       SplitOrder + CAST(CAST([OrderDate] AS INT)AS VARCHAR) AS OrderKey_AnyOrder
INTO #Temp2_AnyOrderWithKey
FROM #Temp1_OrdersOfSalesPerson


SELECT *,
       (RIGHT(REPLICATE('0',6)+CAST(SplitOrder AS VARCHAR(6)),6) + CAST(CAST([SplitDate] AS INT)AS VARCHAR) )AS OrderKey_ChildOrder,
	   (RIGHT(REPLICATE('0',6)+CAST(OriginalOrder AS VARCHAR(6)),6) + CAST(CAST([SplitDate] AS INT)AS VARCHAR) )AS OrderKey_ParentOrder
INTO #Temp3_ChildOrderWithKey
FROM [dbo].[OrderReference]



/*3. Create an unique key for orders*/
SELECT #Temp2_AnyOrderWithKey.* ,
       CASE WHEN OrderKey_ParentOrder IS NULL THEN OrderKey_AnyOrder ELSE OrderKey_ParentOrder END AS OrderKey_ParentOrder,
       CASE WHEN OrderKey_ChildOrder IS NULL THEN 1 ELSE 0 END AS RootIndicator       
INTO #Temp4_OrderKey
FROM #Temp2_AnyOrderWithKey
  LEFT JOIN #Temp3_ChildOrderWithKey 
   ON OrderKey_AnyOrder = OrderKey_ChildOrder
;

/*4. CTE*/
WITH CTE AS (
SELECT SplitOrder,OrderDate, SalesAmount, CustomerID, OrderKey_AnyOrder,OrderKey_ParentOrder,
	   OrderKey_AnyOrder AS OrderKey_RootOrder
FROM #Temp4_OrderKey
WHERE RootIndicator = 1

UNION ALL

SELECT #Temp4_OrderKey.SplitOrder,
       #Temp4_OrderKey.OrderDate,
	   #Temp4_OrderKey.SalesAmount,
	   #Temp4_OrderKey.CustomerID,
	   #Temp4_OrderKey.OrderKey_AnyOrder,
	   #Temp4_OrderKey.OrderKey_ParentOrder,
	   CTE.OrderKey_RootOrder
FROM #Temp4_OrderKey 
  INNER JOIN CTE 
   ON #Temp4_OrderKey.OrderKey_ParentOrder = CTE.OrderKey_AnyOrder
WHERE #Temp4_OrderKey.OrderKey_AnyOrder <> #Temp4_OrderKey.OrderKey_ParentOrder
)

SELECT *
INTO #Temp5_CTE 
FROM CTE


SELECT CustomerID,
       OrderKey_RootOrder, 
       SUM(SalesAmount) AS RootOrderSales,
	   (SELECT Temp6_CTE.OrderDate FROM #Temp5_CTE AS Temp6_CTE
	    WHERE Temp6_CTE.OrderKey_AnyOrder = #Temp5_CTE.OrderKey_RootOrder
	    ) AS RootOrderDate  
INTO #Temp6_RootLevel
FROM #Temp5_CTE 
GROUP BY OrderKey_RootOrder,CustomerID

SELECT * ,
       ROW_NUMBER() OVER (PARTITION BY CustomerID ORDER BY RootOrderDate ASC) AS OrderRank
INTO #Temp7_OrderRank
FROM #Temp6_RootLevel


SELECT * 
FROM #Temp7_OrderRank
WHERE OrderRank = 1


GO

EXEC spFirstRootOrder 
  @SalesPerson='Ann'


